[os-checker-test-suite with Fmt checking] exit status: 0
stdout=[{"name":"./repos/os-checker-test-suite/examples/need-clippy-fix.rs","mismatches":[{"original_begin_line":2,"original_end_line":2,"expected_begin_line":2,"expected_end_line":2,"original":"    _ = (123); \n","expected":"    _ = (123);\n"}]},{"name":"./repos/os-checker-test-suite/examples/need-fmt.rs","mismatches":[{"original_begin_line":1,"original_end_line":1,"expected_begin_line":1,"expected_end_line":2,"original":"fn main() {    println!(\"from example\");\n","expected":"fn main() {\n    println!(\"from example\");\n"}]},{"name":"./repos/os-checker-test-suite/src/main.rs","mismatches":[{"original_begin_line":4,"original_end_line":5,"expected_begin_line":4,"expected_end_line":4,"original":" \nprintln!(\"Hello, world!\");\n","expected":"    println!(\"Hello, world!\");\n"}]},{"name":"./repos/os-checker-test-suite/tests/need-fmt.rs","mismatches":[{"original_begin_line":1,"original_end_line":2,"expected_begin_line":1,"expected_end_line":1,"original":"fn main () {\n  }\n","expected":"fn main() {}\n"}]}]

stderr=
parsed=Fmt([FmtMessage { name: "./repos/os-checker-test-suite/examples/need-clippy-fix.rs", mismatches: [FmtMismatch { original_begin_line: 2, original_end_line: 2, expected_begin_line: 2, expected_end_line: 2, original: "    _ = (123); \n", expected: "    _ = (123);\n" }] }, FmtMessage { name: "./repos/os-checker-test-suite/examples/need-fmt.rs", mismatches: [FmtMismatch { original_begin_line: 1, original_end_line: 1, expected_begin_line: 1, expected_end_line: 2, original: "fn main() {    println!(\"from example\");\n", expected: "fn main() {\n    println!(\"from example\");\n" }] }, FmtMessage { name: "./repos/os-checker-test-suite/src/main.rs", mismatches: [FmtMismatch { original_begin_line: 4, original_end_line: 5, expected_begin_line: 4, expected_end_line: 4, original: " \nprintln!(\"Hello, world!\");\n", expected: "    println!(\"Hello, world!\");\n" }] }, FmtMessage { name: "./repos/os-checker-test-suite/tests/need-fmt.rs", mismatches: [FmtMismatch { original_begin_line: 1, original_end_line: 2, expected_begin_line: 1, expected_end_line: 1, original: "fn main () {\n  }\n", expected: "fn main() {}\n" }] }])

[os-checker-test-suite with Clippy checking] exit status: 101
stdout={"reason":"compiler-message","package_id":"path+file://./repos/os-checker-test-suite#0.1.0","manifest_path":"./repos/os-checker-test-suite/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"os-checker-test-suite","src_path":"./repos/os-checker-test-suite/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: unused variable: `a`\n --> src/main.rs:2:9\n  |\n2 |     let a = 3.14;\n  |         ^ help: if this is intentional, prefix it with an underscore: `_a`\n  |\n  = note: `#[warn(unused_variables)]` on by default\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(unused_variables)]` on by default","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"if this is intentional, prefix it with an underscore","rendered":null,"spans":[{"byte_end":21,"byte_start":20,"column_end":10,"column_start":9,"expansion":null,"file_name":"src/main.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":"_a","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":10,"highlight_start":9,"text":"    let a = 3.14;"}]}]}],"code":{"code":"unused_variables","explanation":null},"level":"warning","message":"unused variable: `a`","spans":[{"byte_end":21,"byte_start":20,"column_end":10,"column_start":9,"expansion":null,"file_name":"src/main.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":10,"highlight_start":9,"text":"    let a = 3.14;"}]}]}}
{"reason":"compiler-message","package_id":"path+file://./repos/os-checker-test-suite#0.1.0","manifest_path":"./repos/os-checker-test-suite/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"os-checker-test-suite","src_path":"./repos/os-checker-test-suite/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error: approximate value of `f{32, 64}::consts::PI` found\n --> src/main.rs:2:13\n  |\n2 |     let a = 3.14;\n  |             ^^^^\n  |\n  = help: consider using the constant directly\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant\n  = note: `#[deny(clippy::approx_constant)]` on by default\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider using the constant directly","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"`#[deny(clippy::approx_constant)]` on by default","rendered":null,"spans":[]}],"code":{"code":"clippy::approx_constant","explanation":null},"level":"error","message":"approximate value of `f{32, 64}::consts::PI` found","spans":[{"byte_end":28,"byte_start":24,"column_end":17,"column_start":13,"expansion":null,"file_name":"src/main.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":13,"text":"    let a = 3.14;"}]}]}}
{"reason":"compiler-message","package_id":"path+file://./repos/os-checker-test-suite#0.1.0","manifest_path":"./repos/os-checker-test-suite/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"os-checker-test-suite","src_path":"./repos/os-checker-test-suite/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error: aborting due to 1 previous error; 1 warning emitted\n\n","$message_type":"diagnostic","children":[],"code":null,"level":"error","message":"aborting due to 1 previous error; 1 warning emitted","spans":[]}}
{"reason":"build-finished","success":false}

stderr=    Checking os-checker-test-suite v0.1.0 (./repos/os-checker-test-suite)
error: could not compile `os-checker-test-suite` (bin "os-checker-test-suite") due to 2 previous errors; 1 warning emitted

parsed=Clippy([CompilerMessage(CompilerMessage { package_id: PackageId { repr: "path+file://./repos/os-checker-test-suite#0.1.0" }, target: Target { name: "os-checker-test-suite", kind: ["bin"], crate_types: ["bin"], required_features: [], src_path: "./repos/os-checker-test-suite/src/main.rs", edition: E2021, doctest: false, test: true, doc: true }, message: Diagnostic { message: "unused variable: `a`", code: Some(DiagnosticCode { code: "unused_variables", explanation: None }), level: Warning, spans: [DiagnosticSpan { file_name: "src/main.rs", byte_start: 20, byte_end: 21, line_start: 2, line_end: 2, column_start: 9, column_end: 10, is_primary: true, text: [DiagnosticSpanLine { text: "    let a = 3.14;", highlight_start: 9, highlight_end: 10 }], label: None, suggested_replacement: None, suggestion_applicability: None, expansion: None }], children: [Diagnostic { message: "`#[warn(unused_variables)]` on by default", code: None, level: Note, spans: [], children: [], rendered: None }, Diagnostic { message: "if this is intentional, prefix it with an underscore", code: None, level: Help, spans: [DiagnosticSpan { file_name: "src/main.rs", byte_start: 20, byte_end: 21, line_start: 2, line_end: 2, column_start: 9, column_end: 10, is_primary: true, text: [DiagnosticSpanLine { text: "    let a = 3.14;", highlight_start: 9, highlight_end: 10 }], label: None, suggested_replacement: Some("_a"), suggestion_applicability: Some(MaybeIncorrect), expansion: None }], children: [], rendered: None }], rendered: Some("warning: unused variable: `a`\n --> src/main.rs:2:9\n  |\n2 |     let a = 3.14;\n  |         ^ help: if this is intentional, prefix it with an underscore: `_a`\n  |\n  = note: `#[warn(unused_variables)]` on by default\n\n") } }), CompilerMessage(CompilerMessage { package_id: PackageId { repr: "path+file://./repos/os-checker-test-suite#0.1.0" }, target: Target { name: "os-checker-test-suite", kind: ["bin"], crate_types: ["bin"], required_features: [], src_path: "./repos/os-checker-test-suite/src/main.rs", edition: E2021, doctest: false, test: true, doc: true }, message: Diagnostic { message: "approximate value of `f{32, 64}::consts::PI` found", code: Some(DiagnosticCode { code: "clippy::approx_constant", explanation: None }), level: Error, spans: [DiagnosticSpan { file_name: "src/main.rs", byte_start: 24, byte_end: 28, line_start: 2, line_end: 2, column_start: 13, column_end: 17, is_primary: true, text: [DiagnosticSpanLine { text: "    let a = 3.14;", highlight_start: 13, highlight_end: 17 }], label: None, suggested_replacement: None, suggestion_applicability: None, expansion: None }], children: [Diagnostic { message: "consider using the constant directly", code: None, level: Help, spans: [], children: [], rendered: None }, Diagnostic { message: "for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant", code: None, level: Help, spans: [], children: [], rendered: None }, Diagnostic { message: "`#[deny(clippy::approx_constant)]` on by default", code: None, level: Note, spans: [], children: [], rendered: None }], rendered: Some("error: approximate value of `f{32, 64}::consts::PI` found\n --> src/main.rs:2:13\n  |\n2 |     let a = 3.14;\n  |             ^^^^\n  |\n  = help: consider using the constant directly\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant\n  = note: `#[deny(clippy::approx_constant)]` on by default\n\n") } }), CompilerMessage(CompilerMessage { package_id: PackageId { repr: "path+file://./repos/os-checker-test-suite#0.1.0" }, target: Target { name: "os-checker-test-suite", kind: ["bin"], crate_types: ["bin"], required_features: [], src_path: "./repos/os-checker-test-suite/src/main.rs", edition: E2021, doctest: false, test: true, doc: true }, message: Diagnostic { message: "aborting due to 1 previous error; 1 warning emitted", code: None, level: Error, spans: [], children: [], rendered: Some("error: aborting due to 1 previous error; 1 warning emitted\n\n") } }), BuildFinished(BuildFinished { success: false })])