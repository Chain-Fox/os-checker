name: Run Checkers
# on: [push]
on:
  push:
    branches: [ main ]

env:
  # os-checker log level
  RUST_LOG: trace
  # flag a bot commit
  BOT: 1
  # enable sccache cache
  cache: false
  # false: run with json stdout emitted, and no interaction with database;
  # true: run with json file emitted, and push it to database.
  PUSH: false
  # use which configs
  CONFIGS: repos.json # for debug single repo
  # CONFIGS: repos-default.json repos-ui.json # full repo list

  # false: enable toolchain downloading, and disable .rustup dir caching
  # true: disable toolchain downloading, and enable .rustup dir caching
  update_toolchain: false
  rust_toolchain: nightly-2024-09-09
  # set from dtolnay/rust-toolchain, in case update_toolchain is false
  CARGO_HOME: /home/runner/.cargo
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: webfactory/ssh-agent@v0.9.0
        with:
            ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Download repos-ui.json
        run: |
          mkdir -p ~/check/batch
          cp Makefile ~/check/
          cp assets/repos.json ~/check/
          cp assets/repos-ui.json ~/check/
          cp assets/repos-default.json ~/check/

      - name: Set Up Github Environment Variables
        run: |
          # echo "RUSTC_VERSION=$(rustc -V)" >> $GITHUB_ENV
          echo "cache_key=${{ env.rust_toolchain }}-${{ hashFiles('assets/repos*.json', 'Cargo.lock') }}" >> $GITHUB_ENV
          [ ${{ env.cache }} = 'true' ] && echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV && echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV || true

      - name: Restore Rustup Cache 
        # if: ${{ env.update_toolchain != 'true' }}
        id: cache-rustup-restore
        uses: actions/cache/restore@v4
        with:
          path: ~/.rustup/
          key: ${{ runner.os }}-rustup-${{ env.cache_key }}

      - uses: dtolnay/rust-toolchain@master
        if: ${{ env.update_toolchain == 'true' }}
        with:
          toolchain: ${{ env.rust_toolchain }}
          components: rustfmt, clippy

      - name: Run sccache-cache
        if: ${{ env.cache == 'true' }}
        uses: mozilla-actions/sccache-action@v0.0.5

      - name: Restore Cargo Cache 
        id: cache-cargo-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            /tmp/os-checker/checkers
          key: ${{ runner.os }}-cargo-${{ env.cache_key }}

      - name: Install os-checker
        run: cargo install --path . --force

      - name: Prepare toolchain environment needed from all repos and checkers
        run: |
          cd ~/check 
          # os-checker setup --config repos.json 
          make setup

      - name: Run All Checkers
        run: |
          cd ~/check
          # os-checker run --config repos.json --emit batch/single.json
          make run

      - name: Commit And Push To database repo
        if: ${{ env.PUSH == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          cd ~/check
          make clone_database
          cd database
          git switch debug
          echo "切换到 debug 分支"
          git pull --rebase # 防止二次运行 CI 时落后于远程分支

          rm -rf batch # 移除旧的 batch 数据
          cp -r ~/check/batch . # 更新新的 batch 数据
          sh push.sh

      - name: Save Rustup Cache
        id: cache-rustup-save
        uses: actions/cache/save@v4
        with:
          path: ~/.rustup/
          key: ${{ steps.cache-rustup-restore.outputs.cache-primary-key }}

      - name: Save Cargo Cache
        id: cache-cargo-save
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ steps.cache-cargo-restore.outputs.cache-primary-key }}

