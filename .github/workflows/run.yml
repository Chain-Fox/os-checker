name: Run Checkers

on:
  push:
    branches: [ main, feat/* ]

env:
  # gh cli needs this token
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  # os-checker log level
  RUST_LOG: info
  # flag a bot commit
  BOT: 1
  # false: run with json stdout emitted, and no interaction with database;
  # true: run with json file emitted, and push it to database.
  PUSH: true
  # push to which database branch 
  DATABASE: debug
  # cache.redb tag in database release
  TAG_CACHE: cache-v9.redb
  # repos-default.json tag in database release
  TAG_CACHE_REPOS_DEFAULT: cache-v8.redb
  # compiled checker binaries
  TAG_CHECKER_DOWNLOAD: cache-v7.redb
  # force downloading repos and check running
  FORCE_REPO_CHECK: true
  # use which configs
  CONFIGS: repos.json # for debug single repo
  # CONFIGS: repos-default.json repos-ui.json # full repo list

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}
            ${{ secrets.SSH_PRIVATE_KEY_GITEE }}

      - name: Prepare Makefile and repos JSONs
        run: |
          mkdir -p ~/check/batch
          cp Makefile ~/check/
          cp assets/repos.json ~/check/
          cp assets/repos-ui.json ~/check/
          gh release download -R os-checker/database ${{ env.TAG_CACHE_REPOS_DEFAULT }} -p repos-default.json -D ~/check/
          mv ~/check/repos-default.json ~/check/repos-default-raw.json
          # temporarily disable qclic/e1000e-frame
          jq 'del(."qclic/e1000e-frame")' ~/check/repos-default-raw.json > ~/check/repos-default.json
          cd ~/check
          gh release download -R os-checker/database ${{ env.TAG_CACHE }} -p cache.redb || echo "cache.redb not found"
          # tar -xJvf cache.redb.tar.xz
          ls -alh

      - uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: nightly-2024-10-24
          components: rustfmt, clippy

      - name: Install Checkers
        run: |
          # install lockbud 
          curl --proto '=https' --tlsv1.2 -LsSf https://github.com/os-checker/lockbud/releases/download/v0.1.0/lockbud-installer.sh | sh
          # install mirai
          curl --proto '=https' --tlsv1.2 -LsSf https://github.com/os-checker/MIRAI/releases/download/v1.1.9/mirai-installer.sh | sh
          # install audit
          gh release download --clobber -R os-checker/database ${{ env.TAG_CHECKER_DOWNLOAD }} -p cargo-audit -D ~/.cargo/bin/
          # install rap
          gh release download -R os-checker/database ${{ env.TAG_CHECKER_DOWNLOAD }} -p rap -p cargo-rap 
          chmod +x rap && mv rap ~/.cargo/bin/
          chmod +x cargo-rap && mv cargo-rap ~/.cargo/bin/
          ls -alh ~/.cargo/bin/
          # install outdated
          wget https://github.com/kbknapp/cargo-outdated/releases/download/v0.15.0/cargo-outdated-0.15.0-x86_64-unknown-linux-musl.tar.gz
          tar xvzf cargo-outdated-0.15.0-x86_64-unknown-linux-musl.tar.gz
          mv cargo-outdated ~/.cargo/bin/

      - name: Install os-checker
        run: cargo install --path . --force

      - name: Install os-checker batch
        run: cargo install --path . --force --example batch

      - name: Run All Checkers
        run: |
          git lfs install --skip-smudge # 如果 lfs 下载不了大文件，跳过下载
          df -alh
          cd ~/check
          os-checker db --start cache.redb

          # make run || echo "运行所有仓库的检查失败，但依然提交已有的 cache.redb 到数据仓库"
          # 仅在支持新检查时采用 batch，因为中途一旦出错，只使用 run 无法在中途上传检查结果的缓存数据
          batch --size 8 #|| echo "运行所有仓库的检查失败，但依然提交已有的 cache.redb 到数据仓库"

          os-checker db --done cache.redb

      - name: Run cache_redb test
        run: |
          cp ~/check/cache.redb .
          cargo test -p os-checker-types -- --nocapture cache_redb

      - name: Update cache.redb
        run: |
          cd ~/check
          df -alh
          make upload

      - name: Commit And Push To database repo
        if: ${{ env.PUSH == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          cargo install --path os-checker-database -F clear_batch

          cd ~/check
          make clone_database
          cd database

          git switch ${{ env.DATABASE }}
          echo "切换到 ${{ env.DATABASE }} 分支"

          git pull --rebase # 防止二次运行 CI 时落后于远程分支

          rm -rf batch # 移除旧的 batch 数据
          cp -r ~/check/batch . # 更新新的 batch 数据
          cp ~/check/cache.redb . # 复制数据库缓存文件
          sh push.sh
          df -alh

